# -*- coding: utf-8 -*-
"""weather_api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wMSMEwtD4_JlOXpTynRYe7nGk13LRt-c
"""

pip install dateparser


import requests
from datetime import datetime
import dateparser  # This library helps to parse natural language dates
import sys

def parse_date(input_date):
    parsed = dateparser.parse(input_date)
    if not parsed:
        raise ValueError(f"Could not parse the date input: {input_date}")
    return parsed.strftime("%Y-%m-%d")

def fetch_weather_forecast(location, start_date, end_date, api_key):
    """Fetch weather forecast or historical averages based on date."""
    today = datetime.now().date()
    start_date_obj = datetime.strptime(start_date, "%Y-%m-%d").date()

    # If travel starts more than 15 days from today, use historical averages
    days_ahead = (start_date_obj - today).days
    if days_ahead > 15:
        include_param = "stats"
        print("\nDates are far in the future. Fetching historical average weather (not real forecast)...")
    else:
        include_param = "days"

    # Format the API endpoint
    base_url = (
        f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/"
        f"{location}/{start_date}/{end_date}?key={api_key}&unitGroup=metric&include={include_param}"
    )

    try:
        response = requests.get(base_url)
        response.raise_for_status()
        data = response.json()

        forecast_days = data.get('days', [])
        if not forecast_days:
            print("No weather data found for the given range.")
            return

        print(f"\nWeather forecast for {location} from {start_date} to {end_date}:")
        for day in forecast_days:
            date = day.get('datetime')
            max_temp = day.get('tempmax')
            min_temp = day.get('tempmin')
            rainfall = day.get('precip', 0)
            print(f"Date: {date} | Max Temp: {max_temp}°C | Min Temp: {min_temp}°C | Rainfall: {rainfall} mm")

    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e}")
        print(f"URL tried: {base_url}")
    except KeyError:
        print("Could not extract weather data – please check the input values.")
    except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
if __name__ == "__main__":
    location = input("Enter location (e.g., 'San Jose, CA'): ")
    start_date_input = input("Enter start date (e.g., '15th May'): ")
    end_date_input = input("Enter end date (e.g., '20th May'): ")
    api_key = "VFE2P34QYMZF8AWXQZN5TTMFK"  # Replace with your actual Visual Crossing API key

    # Check if the API key has been set correctly
    if api_key == "YOUR_API_KEY" or not api_key.strip():
      print("❗ Error: Please set your Visual Crossing API key before running the script.")
      sys.exit(1)

    try:
        start_date = parse_date(start_date_input)
        end_date = parse_date(end_date_input)

        if start_date > end_date:
            print("Start date must be before end date.")
            sys.exit(1)

    except ValueError as e:
        print(e)
        sys.exit(1)

    fetch_weather_forecast(location, start_date, end_date, api_key)

